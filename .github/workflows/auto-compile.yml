name: Auto-compile protocols.json

on:
  push:
    branches: [ main ]
    paths:
      - 'protocols/**'
      - 'scripts/compile.js'

permissions:
  contents: write
  issues: write

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Compile protocols
      run: |
        echo "🔨 Compiling individual protocol files..."
        node scripts/compile.js

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet protocols.json; then
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes to protocols.json"
        else
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "protocols.json has been updated"
        fi

    - name: Commit updated protocols.json
      if: steps.changes.outputs.changed == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add protocols.json
        git commit -m "chore: auto-compile protocols.json from individual files"
        git push

    - name: Get protocols info
      if: steps.changes.outputs.changed == 'true'
      id: info
      run: |
        PROTOCOLS_COUNT=$(jq '.protocols | length' protocols.json)
        LAST_UPDATED=$(jq -r '.lastUpdated' protocols.json)
        echo "count=$PROTOCOLS_COUNT" >> $GITHUB_OUTPUT
        echo "updated=$LAST_UPDATED" >> $GITHUB_OUTPUT
        echo "✅ Compiled $PROTOCOLS_COUNT protocols"
        echo "📅 Last updated: $LAST_UPDATED"

    - name: Get changed files
      if: steps.changes.outputs.changed == 'true'
      id: changed_files
      run: |
        CHANGED=$(git diff HEAD~1 --name-only protocols/ | grep '\.json$' || echo "")
        echo "files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release
      if: steps.changes.outputs.changed == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const date = new Date('${{ steps.info.outputs.updated }}');
          const tag = `data-${date.getFullYear()}.${String(date.getMonth()+1).padStart(2,'0')}.${String(date.getDate()).padStart(2,'0')}-${String(date.getHours()).padStart(2,'0')}${String(date.getMinutes()).padStart(2,'0')}${String(date.getSeconds()).padStart(2,'0')}`;

          const changedFiles = `${{ steps.changed_files.outputs.files }}`.trim().split('\n').filter(f => f);
          const protocolsChanged = changedFiles.map(f => f.replace('protocols/', '').replace('.json', '')).join(', ') || 'Multiple protocols';

          const releaseBody = `## 🔄 Operators Data Updated

          **Summary:**
          - 📊 Total Protocols: ${{ steps.info.outputs.count }}
          - 🕒 Updated: ${{ steps.info.outputs.updated }}
          - 📝 Commit: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

          **Changed Files:**
          ${changedFiles.length > 0 ? changedFiles.map(f => `- \`${f}\``).join('\n') : '- protocols.json'}

          **Protocols Modified:**
          ${protocolsChanged}

          ---

          ### 🔔 For Frontend Maintainers

          Update the submodule in operators-frontend:
          \`\`\`bash
          cd data/operators
          git pull origin main
          cd ../..
          git add data/operators
          git commit -m "chore: update operators data to ${tag}"
          git push
          \`\`\`

          ---
          *This release was automatically created when protocols.json was updated.*`;

          try {
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Operators Data - ${date.toISOString().split('T')[0]}`,
              body: releaseBody,
              draft: false,
              prerelease: false
            });
            console.log(`✅ Created release: ${release.html_url}`);
          } catch (error) {
            console.error('Failed to create release:', error.message);
          }